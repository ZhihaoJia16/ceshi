'''
使用工厂模式、单例模式实现如下需求：
(1) 电脑工厂类 ComputerFactory 用于生产电脑 Computer。工厂类使用单例模式，也就是说只能有一个工厂对象。
(2) 工厂类中可以生产各种品牌的电脑：联想、华硕、神舟
(3) 各种品牌的电脑使用继承实现：
(4) 父类是 Computer 类，定义了 calculate 方法
(5) 各品牌电脑类需要重写父类的 calculate
'''
class ComputerFactory:
    __obj=None
    __init_flag=True
    def create_computer(self,brand):
        if brand=='联想':
            return Lianxiang()
        elif brand=='华硕':
            return Huashuo()
        elif brand=='神州':
            return Shenzhou()
        else:
            return '未知品牌，无法创建'
    def __new__(cls,*args,**kwargs):
        if cls.__obj==None:
            cls.__obj=object.__new__(cls)
        return cls.__obj
    def __init__(self):
        if ComputerFactory.__init_flag:
            print('init......')
            ComputerFactory.__init_flag=False
class Lianxiang:
    pass
class Huashuo:
    pass
class Shenzhou:
    pass
factory=ComputerFactory()
c1=factory.create_computer('华硕')
c2=factory.create_computer('神州')
print(c1)
print(c2)

factory2=ComputerFactory()
print(factory)
print(factory2)



'''
class Employee:
    id=1000
    def __init__(self,id,name,salary):
        self.id=id
        self.name=name
        self.salary=salary
        
    def __add__(self,other):
        return self.salary+other
    
    def idNum(self,name,salary):
        id+=1
        print(id)
        
    @property
    def salary(self):
        return self.salary
    @salary.setter
    def salary(self,salNum):
        if not isinstance(salNum,int):
            raise ValueError('salary must be an integer!')
        if salNum<1000 or salNum>50000:
            raise ValueError('salary must be between 1000-50000!')
        self.salary=salNum

'''


--------------------------------

    
廖雪峰的python教程 - 使用@property - 廖雪峰的官方网站-----介绍@property逻辑较好
'''
#S3_1_1 简述多进程
#多进程：模仿一边唱歌，一边跳舞。
'''
from time import sleep
def sing():
    for i in range(10):
        print('唱歌')
        dance()
        sleep(1)
def dance():
    print('跳舞')
sing()
'''
#主进程只有一个，子进程可以有多个
#multiprocessing

'''
from multiprocessing import Process
def run(name):
    print("子进程"+name+"正在进行")
if __name__=="__main__": #对于多进程，在windows的python3中必须有此行。
    print('父进程启动')
    p=Process(target=run,args=('test',),name="pro1")
    #target表示调用对象，args表示调用对象的位置参数元祖
    #（注意：元组中只有一个元素时结尾要加,）
    print('子进程将进行')
    p.start()
    print(p.name)  #p.pid
    p.join()
    print('子进程结束')
''' 
    
#S3_1_2 进程类 

'''
多进程
Process(target,name,args)
参数说明
-target表示调用对象，即子进程要执行的任务
-args表示调用对象的位置参数元祖，args=(1,)
-name为子进程的名称

'''
